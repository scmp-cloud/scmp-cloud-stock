package org.macula.cloud.stock.repository;

import org.macula.cloud.stock.domain.StockStatus;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

public interface StockStatusRepository extends JpaRepository<StockStatus, Long> {
	
	
	@Modifying
	@Query(nativeQuery = true, value = "DELETE "
			+ "FROM "
			+ "	cn_stock_status "
			+ "WHERE "
			+ "	acc_date = ?1")
	int deleteStockStatus(String accDate);
	
	@Modifying
	@Query(nativeQuery=true, value="DELETE "
			+ "FROM "
			+ "	cn_stock_status "
			+ "WHERE "
			+ "	acc_date = ?1 "
			+ "AND wh_code IN ( "
			+ "	SELECT "
			+ "		g.parent_code "
			+ "	FROM "
			+ "		cn_stock_group g "
			+ "	WHERE "
			+ "		g.inactive_date >= STR_TO_DATE(?1, '%Y%m%d') "
			+ "	AND g.effective_date <= STR_TO_DATE(?1, '%Y%m%d') "
			+ ");")
	int deleteGroupStock(String accDate);

	@Modifying
	@Query(nativeQuery = true, value = "INSERT INTO cn_stock_status ( "
			+ "	acc_date, "
			+ "	product_code, "
			+ "	wh_code, "
			+ "	loc_code, "
			+ "	initialized_qty, "
			+ "	balance_qty, "
			+ "	reserved_qty, "
			+ "	released_qty, "
			+ "	commited_qty, "
			+ "	increased_qty, "
			+ "	reduced_qty, "
			+ "	last_initialized_time, "
			+ "	last_reserved_time, "
			+ "	last_released_time, "
			+ "	last_commited_time, "
			+ "	last_increased_time, "
			+ "	last_reduced_time, "
			+ "	created_by, "
			+ "	last_updated_by, "
			+ "	created_time, "
			+ "	last_updated_time "
			+ ")( "
			+ "	SELECT "
			+ "		s.acc_date, "
			+ "		s.product_code, "
			+ "		g.parent_code, "
			+ "		s.loc_code, "
			+ "		sum(s.initialized_qty), "
			+ "		sum(s.balance_qty), "
			+ "		sum(s.reserved_qty), "
			+ "		sum(s.released_qty), "
			+ "		sum(s.commited_qty), "
			+ "		sum(s.increased_qty), "
			+ "		sum(s.reduced_qty), "
			+ "		max(s.last_initialized_time), "
			+ "		max(s.last_reserved_time), "
			+ "		max(s.last_released_time), "
			+ "		max(s.last_commited_time), "
			+ "		max(s.last_increased_time), "
			+ "		max(s.last_reduced_time), "
			+ "		max(s.created_by), "
			+ "		max(s.last_updated_by), "
			+ "		max(s.created_time), "
			+ "		max(s.last_updated_time) "
			+ "	FROM "
			+ "		cn_stock_status s, "
			+ "		cn_stock_group g "
			+ "	WHERE "
			+ "		s.wh_code = g.wh_code "
			+ "	AND g.parent_code <> g.wh_code "
			+ "	AND s.acc_date = ?1 "
			+ "	AND g.inactive_date >= STR_TO_DATE(?1, '%Y%m%d') "
			+ "	AND g.effective_date <= STR_TO_DATE(?1, '%Y%m%d') "
			+ "	AND g.`level` = ?2 "
			+ "	AND g.product_code = '*' "
			+ "	AND g.product_code NOT IN ( "
			+ "		SELECT "
			+ "			p.product_code "
			+ "		FROM "
			+ "			cn_stock_group p "
			+ "		WHERE "
			+ "			p.product_code <> '*' "
			+ "		AND p.inactive_date >= STR_TO_DATE(?1, '%Y%m%d') "
			+ "		AND p.effective_date <= STR_TO_DATE(?1, '%Y%m%d') "
			+ "	) "
			+ "	GROUP BY "
			+ "		s.acc_date, "
			+ "		s.product_code, "
			+ "		g.parent_code, "
			+ "		s.loc_code "
			+ ");")
	int updateDefaultGroupStockByLevel(String accDate, int level);

	@Modifying
	@Query(nativeQuery = true, value = "INSERT INTO cn_stock_status ( "
			+ "	acc_date, "
			+ "	product_code, "
			+ "	wh_code, "
			+ "	loc_code, "
			+ "	initialized_qty, "
			+ "	balance_qty, "
			+ "	reserved_qty, "
			+ "	released_qty, "
			+ "	commited_qty, "
			+ "	increased_qty, "
			+ "	reduced_qty, "
			+ "	last_initialized_time, "
			+ "	last_reserved_time, "
			+ "	last_released_time, "
			+ "	last_commited_time, "
			+ "	last_increased_time, "
			+ "	last_reduced_time, "
			+ "	created_by, "
			+ "	last_updated_by, "
			+ "	created_time, "
			+ "	last_updated_time "
			+ ")( "
			+ "	SELECT "
			+ "		s.acc_date, "
			+ "		s.product_code, "
			+ "		g.parent_code, "
			+ "		s.loc_code, "
			+ "		sum(s.initialized_qty), "
			+ "		sum(s.balance_qty), "
			+ "		sum(s.reserved_qty), "
			+ "		sum(s.released_qty), "
			+ "		sum(s.commited_qty), "
			+ "		sum(s.increased_qty), "
			+ "		sum(s.reduced_qty), "
			+ "		max(s.last_initialized_time), "
			+ "		max(s.last_reserved_time), "
			+ "		max(s.last_released_time), "
			+ "		max(s.last_commited_time), "
			+ "		max(s.last_increased_time), "
			+ "		max(s.last_reduced_time), "
			+ "		max(s.created_by), "
			+ "		max(s.last_updated_by), "
			+ "		max(s.created_time), "
			+ "		max(s.last_updated_time) "
			+ "	FROM "
			+ "		cn_stock_status s, "
			+ "		cn_stock_group g "
			+ "	WHERE "
			+ "		s.wh_code = g.wh_code "
			+ "	AND g.parent_code <> g.wh_code "
			+ "	AND s.acc_date = ?1 "
			+ "	AND g.inactive_date >= STR_TO_DATE(?1, '%Y%m%d') "
			+ "	AND g.effective_date <= STR_TO_DATE(?1, '%Y%m%d') "
			+ "	AND g.`level` = ?2 "
			+ "	AND g.product_code <> '*' "
			+ "	AND g.product_code = s.product_code "
			+ "	GROUP BY "
			+ "		s.acc_date, "
			+ "		s.product_code, "
			+ "		g.parent_code, "
			+ "		s.loc_code "
			+ ");")
	int updateProductGroupStockByLevel(String accDate, int level);

	@Query("from StockStatus a where a.accDate = :accDate")
	Page<StockStatus> findAccDateStock(@Param("accDate") String accDate, Pageable page);
}
